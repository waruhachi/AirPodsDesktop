name: Cross-Platform Builds

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Assets/**'
      - 'Docs/**'

  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Assets/**'
      - 'Docs/**'

  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: RelWithDebInfo
  UPLOAD_ARTIFACT: true
  CACHE_DEPS: false
  FIXED_CMAKE_VERSION: 3.21.4
  # If you later want to enable a fixed CMake on Linux, consider using the Kitware action or keep default.

jobs:
  Build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform_name: Win32
            generator: "Visual Studio 17 2022"
            qt_subdir: "msvc2019"
            enable_installer: true
            cmake_multi_config: true
          - os: ubuntu-latest
            platform_name: ""
            generator: "Ninja"
            qt_subdir: "gcc_64"
            enable_installer: false
            cmake_multi_config: false

    defaults:
      run:
        shell: ${{ startsWith(matrix.os, 'windows') && 'cmd' || 'bash' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
            submodules: recursive

      - name: Prepare build directory
        run: mkdir Build

      - name: Generate dependencies cache key
        if: env.CACHE_DEPS == 'true'
        run: |
          curl -o Build/DepsRef.json https://api.github.com/repos/SpriteOvO/AirPodsDesktop-Deps/git/refs/heads/main
          echo "DepsRef.json:"
          cat Build/DepsRef.json
        shell: ${{ runner.os == 'Windows' && 'bash' || 'bash' }}

      - name: Dependencies cache
        id: cache-deps
        if: env.CACHE_DEPS == 'true'
        uses: actions/cache@v4
        with:
          path: Build/AirPodsDesktop-Deps
          key: ${{ hashFiles('Build/DepsRef.json') }}

      - name: Clone dependencies
        if: env.CACHE_DEPS != 'true' || steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: Build
        run: |
          git clone --recursive https://github.com/SpriteOvO/AirPodsDesktop-Deps.git
          echo "Dependency layout:"
          ls -1
        shell: bash

      - name: Use fixed CMake version (Windows)
        if: runner.os == 'Windows' && env.FIXED_CMAKE_VERSION != ''
        run: |
          choco install cmake.install --version %FIXED_CMAKE_VERSION% --installargs 'ADD_CMAKE_TO_PATH=System' --force
          cmake --version

      - name: Use fixed CMake version (Linux)
        if: runner.os == 'Linux' && env.FIXED_CMAKE_VERSION != ''
        run: |
          echo "Using preinstalled system CMake (override logic can be added if strict version needed)."
          cmake --version

      - name: Install Windows tooling
        if: runner.os == 'Windows'
        run: |
          choco install nsis -y

      - name: Install Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
              ninja-build build-essential git curl unzip tar \
              qtbase5-dev libgl1-mesa-dev libxkbcommon-x11-0 \
              libpulse-dev
          ninja --version || true

      - name: Clone and bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        working-directory: Build
        run: |
          git clone --recursive https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat -disableMetrics

      - name: Clone and bootstrap vcpkg (Linux - optional)
        if: runner.os == 'Linux'
        working-directory: Build
        run: |
          git clone --depth 1 https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        continue-on-error: true

      - name: Configure project
        working-directory: Build
        run: |
          mkdir -p $BUILD_TYPE
          cd $BUILD_TYPE
          
          QT_PREFIX_PATH="${GITHUB_WORKSPACE}/Build/AirPodsDesktop-Deps/Qt/5.15.2/${{ matrix.qt_subdir }}"
          
          echo "Using Qt prefix path: $QT_PREFIX_PATH"
          
          EXTRA_FLAGS=""
          if [ "${{ runner.os }}" = "Windows" ]; then
            # Multi-config; build type passed at build step
            INSTALLER_FLAG="-DAPD_GENERATE_INSTALLER=ON"
          else
            # Single-config; pass build type now
            INSTALLER_FLAG="-DAPD_GENERATE_INSTALLER=OFF"
            EXTRA_FLAGS="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
          fi
          
          TOOLCHAIN_FLAG=""
          if [ -d "${GITHUB_WORKSPACE}/Build/vcpkg" ]; then
            if [ -f "${GITHUB_WORKSPACE}/Build/vcpkg/scripts/buildsystems/vcpkg.cmake" ]; then
              TOOLCHAIN_FLAG="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/Build/vcpkg/scripts/buildsystems/vcpkg.cmake"
            fi
          fi
          
          # Architecture argument only relevant on Windows
          ARCH_ARG=""
          if [ "${{ runner.os }}" = "Windows" ] && [ -n "${{ matrix.platform_name }}" ]; then
            ARCH_ARG='-A ${{ matrix.platform_name }}'
          fi
          
          echo "Configuring with generator: ${{ matrix.generator }}"
          
          cmake -G "${{ matrix.generator }}" \
                $ARCH_ARG \
                $EXTRA_FLAGS \
                $TOOLCHAIN_FLAG \
                -DCMAKE_PREFIX_PATH="${QT_PREFIX_PATH}" \
                $INSTALLER_FLAG \
                -DAPD_BUILD_GIT_HASH=${{ github.sha }} \
                ../../
        shell: bash

      - name: Build project
        working-directory: Build/${{ env.BUILD_TYPE }}
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake --build . --config %BUILD_TYPE%
          else
            cmake --build . -- -j$(nproc)
          fi

      - name: List build outputs
        working-directory: Build/${{ env.BUILD_TYPE }}
        run: |
          echo "Binary directory (if exists):"
          if [ "${{ runner.os }}" = "Windows" ]; then
            dir /s Binary 2>nul || echo "No Binary dir"
            dir /s Installer 2>nul || echo "No Installer dir"
          else
            ls -R ./Binary || echo "No Binary dir"
            ls -R ./Installer || echo "No Installer dir (expected on Linux)"
          fi

      - name: Prepare Windows artifacts
        if: runner.os == 'Windows' && env.UPLOAD_ARTIFACT == 'true' && matrix.enable_installer
        working-directory: Build\\${{ env.BUILD_TYPE }}\\Installer
        run: |
          cd _CPack_Packages\\win32\\NSIS
          for /d %%D in (AirPodsDesktop-*-win32) do (
            move "%%D" "AirPodsDesktop-${{ github.sha }}-win32"
          )

      - name: Upload artifact - Windows Installer
        if: runner.os == 'Windows' && env.UPLOAD_ARTIFACT == 'true' && matrix.enable_installer
        uses: actions/upload-artifact@v4
        with:
          name: AirPodsDesktop-${{ github.sha }}-Installer
          path: Build\\${{ env.BUILD_TYPE }}\\Installer\\AirPodsDesktop-*-win32.exe
          retention-days: 90

      - name: Upload artifact - Windows Portable
        if: runner.os == 'Windows' && env.UPLOAD_ARTIFACT == 'true' && matrix.enable_installer
        uses: actions/upload-artifact@v4
        with:
          name: AirPodsDesktop-${{ github.sha }}-Portable
          path: Build\\${{ env.BUILD_TYPE }}\\Installer\\_CPack_Packages\\win32\\NSIS\\AirPodsDesktop-${{ github.sha }}-win32\\AirPodsDesktop
          retention-days: 90

      - name: Prepare Linux artifact
        if: runner.os == 'Linux' && env.UPLOAD_ARTIFACT == 'true'
        working-directory: Build/${{ env.BUILD_TYPE }}
        run: |
          if [ -d "Binary" ]; then
            mkdir -p package-root
            cp -a Binary/* package-root/ || true
            tar -czf AirPodsDesktop-${{ github.sha }}-linux.tar.gz -C package-root .
            ls -lh AirPodsDesktop-${{ github.sha }}-linux.tar.gz
          else
            echo "Binary directory not found; adjust packaging step as needed."
            exit 1
          fi

      - name: Upload artifact - Linux Portable
        if: runner.os == 'Linux' && env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: AirPodsDesktop-${{ github.sha }}-Linux
          path: Build/${{ env.BUILD_TYPE }}/AirPodsDesktop-${{ github.sha }}-linux.tar.gz
          retention-days: 90